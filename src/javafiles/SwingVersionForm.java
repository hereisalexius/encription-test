/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javafiles;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.FileFilter;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafiles.Substitution.Additive;
import javafiles.Substitution.Matrix;
import javafiles.Substitution.Polinomial;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author hereisalexius
 */
public class SwingVersionForm extends javax.swing.JFrame {

    private KeysSet keysSet;
    private final EncryptController ec = EncryptController.getInstance();

    public SwingVersionForm() {
        this.keysSet = new KeysSet();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        mode = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        keyPanel = new javax.swing.JPanel();
        modePanel = new javax.swing.JPanel();
        loadModeRadio = new javax.swing.JRadioButton();
        generateModeRadio = new javax.swing.JRadioButton();
        loadKeyPanel = new javax.swing.JPanel();
        keyPathTextField = new javax.swing.JTextField();
        openKeyPathButton = new javax.swing.JButton();
        generateKeyPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        generateKeyButton = new javax.swing.JButton();
        keySizeBox = new javax.swing.JComboBox();
        saveKeyButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        keysTable = new javax.swing.JTable();
        substitutionPanel = new javax.swing.JPanel();
        matrixSubstPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        poliMatrixBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        poliMatrixFiBox = new javax.swing.JComboBox();
        poliMatrixOmegaBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        polinomSubstPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        poliPowBox = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        poliPowFiBox = new javax.swing.JComboBox();
        poliPowOmegaBox = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        additiveComponentsPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        substAlphaText = new javax.swing.JSpinner();
        substBetaText = new javax.swing.JSpinner();
        substExecuteButton = new javax.swing.JButton();
        substShowTableButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        modePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Mode"));

        mode.add(loadModeRadio);
        loadModeRadio.setText("Load");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, loadKeyPanel, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), loadModeRadio, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        mode.add(generateModeRadio);
        generateModeRadio.setText("Generate");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, generateKeyPanel, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), generateModeRadio, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout modePanelLayout = new javax.swing.GroupLayout(modePanel);
        modePanel.setLayout(modePanelLayout);
        modePanelLayout.setHorizontalGroup(
            modePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(modePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loadModeRadio)
                    .addComponent(generateModeRadio))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        modePanelLayout.setVerticalGroup(
            modePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modePanelLayout.createSequentialGroup()
                .addComponent(loadModeRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateModeRadio))
        );

        loadKeyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Load"));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, openKeyPathButton, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), loadKeyPanel, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, loadKeyPanel, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), keyPathTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        openKeyPathButton.setText("Open");
        openKeyPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openKeyPathButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loadKeyPanelLayout = new javax.swing.GroupLayout(loadKeyPanel);
        loadKeyPanel.setLayout(loadKeyPanelLayout);
        loadKeyPanelLayout.setHorizontalGroup(
            loadKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadKeyPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(keyPathTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(openKeyPathButton)
                .addContainerGap())
        );
        loadKeyPanelLayout.setVerticalGroup(
            loadKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadKeyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loadKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openKeyPathButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        generateKeyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Generate"));

        jLabel1.setText("Key length");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, generateKeyPanel, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), jLabel1, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        generateKeyButton.setText("Generate");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, generateKeyPanel, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), generateKeyButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        generateKeyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateKeyButtonActionPerformed(evt);
            }
        });

        keySizeBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${keySizes}");
        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, keySizeBox);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, generateKeyPanel, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), keySizeBox, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout generateKeyPanelLayout = new javax.swing.GroupLayout(generateKeyPanel);
        generateKeyPanel.setLayout(generateKeyPanelLayout);
        generateKeyPanelLayout.setHorizontalGroup(
            generateKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generateKeyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keySizeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateKeyButton, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                .addContainerGap())
        );
        generateKeyPanelLayout.setVerticalGroup(
            generateKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generateKeyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(generateKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keySizeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generateKeyButton)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        saveKeyButton.setText("Save key");
        saveKeyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveKeyButtonActionPerformed(evt);
            }
        });

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${keys}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, keysTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ObjectProperty.create());
        columnBinding.setColumnName("Key");
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(keysTable);

        javax.swing.GroupLayout keyPanelLayout = new javax.swing.GroupLayout(keyPanel);
        keyPanel.setLayout(keyPanelLayout);
        keyPanelLayout.setHorizontalGroup(
            keyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(keyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(modePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadKeyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(generateKeyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, keyPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveKeyButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        keyPanelLayout.setVerticalGroup(
            keyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(modePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadKeyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateKeyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveKeyButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Key", keyPanel);

        matrixSubstPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Matrix"));

        jLabel2.setText("Power");

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${PMValues}");
        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, poliMatrixBox);
        bindingGroup.addBinding(jComboBoxBinding);

        poliMatrixBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                poliMatrixBoxItemStateChanged(evt);
            }
        });

        jLabel3.setText("φ");

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${poliMatrixFiValues}");
        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, poliMatrixFiBox);
        bindingGroup.addBinding(jComboBoxBinding);

        poliMatrixFiBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                poliMatrixFiBoxItemStateChanged(evt);
            }
        });

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${poliMatrixOmegaValues}");
        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, poliMatrixOmegaBox);
        bindingGroup.addBinding(jComboBoxBinding);

        jLabel4.setText("ω");

        javax.swing.GroupLayout matrixSubstPanelLayout = new javax.swing.GroupLayout(matrixSubstPanel);
        matrixSubstPanel.setLayout(matrixSubstPanelLayout);
        matrixSubstPanelLayout.setHorizontalGroup(
            matrixSubstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrixSubstPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(poliMatrixBox, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(poliMatrixFiBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(poliMatrixOmegaBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        matrixSubstPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {poliMatrixBox, poliMatrixFiBox, poliMatrixOmegaBox});

        matrixSubstPanelLayout.setVerticalGroup(
            matrixSubstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrixSubstPanelLayout.createSequentialGroup()
                .addGroup(matrixSubstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(matrixSubstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(poliMatrixBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(poliMatrixFiBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(poliMatrixOmegaBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addGroup(matrixSubstPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        polinomSubstPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Polinomial"));

        jLabel5.setText("Power");

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${PMValues}");
        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, poliPowBox);
        bindingGroup.addBinding(jComboBoxBinding);

        poliPowBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                poliPowBoxItemStateChanged(evt);
            }
        });

        jLabel6.setText("φ");

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${poliPowFiValues}");
        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, poliPowFiBox);
        bindingGroup.addBinding(jComboBoxBinding);

        poliPowFiBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                poliPowFiBoxItemStateChanged(evt);
            }
        });

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${poliPowOmegaValues}");
        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, poliPowOmegaBox);
        bindingGroup.addBinding(jComboBoxBinding);

        jLabel7.setText("ω");

        javax.swing.GroupLayout polinomSubstPanel1Layout = new javax.swing.GroupLayout(polinomSubstPanel1);
        polinomSubstPanel1.setLayout(polinomSubstPanel1Layout);
        polinomSubstPanel1Layout.setHorizontalGroup(
            polinomSubstPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(polinomSubstPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(poliPowBox, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(poliPowFiBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(poliPowOmegaBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        polinomSubstPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {poliPowBox, poliPowFiBox, poliPowOmegaBox});

        polinomSubstPanel1Layout.setVerticalGroup(
            polinomSubstPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(polinomSubstPanel1Layout.createSequentialGroup()
                .addGroup(polinomSubstPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(polinomSubstPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(poliPowBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)
                        .addComponent(poliPowFiBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(poliPowOmegaBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7))
                    .addGroup(polinomSubstPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        additiveComponentsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Additive components"));

        jLabel8.setText("α");

        jLabel9.setText("β");

        substAlphaText.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        substBetaText.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        javax.swing.GroupLayout additiveComponentsPanelLayout = new javax.swing.GroupLayout(additiveComponentsPanel);
        additiveComponentsPanel.setLayout(additiveComponentsPanelLayout);
        additiveComponentsPanelLayout.setHorizontalGroup(
            additiveComponentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, additiveComponentsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(substAlphaText, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(substBetaText, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );

        additiveComponentsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {substAlphaText, substBetaText});

        additiveComponentsPanelLayout.setVerticalGroup(
            additiveComponentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(additiveComponentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel8)
                .addComponent(jLabel9)
                .addComponent(substAlphaText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(substBetaText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        substExecuteButton.setText("Execute");
        substExecuteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                substExecuteButtonActionPerformed(evt);
            }
        });

        substShowTableButton.setText("Show table");
        substShowTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                substShowTableButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout substitutionPanelLayout = new javax.swing.GroupLayout(substitutionPanel);
        substitutionPanel.setLayout(substitutionPanelLayout);
        substitutionPanelLayout.setHorizontalGroup(
            substitutionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(substitutionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(substitutionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(matrixSubstPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(polinomSubstPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(additiveComponentsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(substitutionPanelLayout.createSequentialGroup()
                        .addComponent(substExecuteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(substShowTableButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        substitutionPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {substExecuteButton, substShowTableButton});

        substitutionPanelLayout.setVerticalGroup(
            substitutionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(substitutionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(polinomSubstPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(matrixSubstPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(additiveComponentsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(substitutionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(substExecuteButton)
                    .addComponent(substShowTableButton))
                .addContainerGap(176, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Substitution", substitutionPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateKeyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateKeyButtonActionPerformed
        setKeys(ec.generateKeys((Integer) keySizeBox.getSelectedItem()).getKeys());
    }//GEN-LAST:event_generateKeyButtonActionPerformed

    private void saveKeyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveKeyButtonActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("txt files (*.txt)", "txt", "TXT"));
        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                if (fc.getSelectedFile().getAbsolutePath() != null && !fc.getSelectedFile().getAbsolutePath().isEmpty()) {
                    ec.saveKey(fc.getSelectedFile().getAbsolutePath(), keysSet);
                }
            } catch (IOException ex) {
                Logger.getLogger(SwingVersionForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_saveKeyButtonActionPerformed

    private void openKeyPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openKeyPathButtonActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("txt files (*.txt)", "txt", "TXT"));
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                if (fc.getSelectedFile().getAbsolutePath() != null && !fc.getSelectedFile().getAbsolutePath().isEmpty()) {
                    setKeys(ec.loadKey(fc.getSelectedFile().getAbsolutePath()).getKeys());
                    keyPathTextField.setText(fc.getSelectedFile().getAbsolutePath());
                }
            } catch (IOException ex) {
                Logger.getLogger(SwingVersionForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_openKeyPathButtonActionPerformed

    private void poliPowBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_poliPowBoxItemStateChanged
        if (poliPowFiBox.getItemCount() > 0 && ((Integer) poliPowBox.getSelectedItem()) != 16) {
            setPoliPowFiValues(EncryptController.getFiPoliSelection((Integer) poliPowBox.getSelectedItem()));
            setPoliPowOmegaValues(EncryptController.getOmegaPoliSelection((String) poliPowFiBox.getSelectedItem()));
        }
        // FIXME 16 баг в логике 
    }//GEN-LAST:event_poliPowBoxItemStateChanged

    private void poliPowFiBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_poliPowFiBoxItemStateChanged
        if (poliPowOmegaBox.getItemCount() > 0) {
            setPoliPowOmegaValues(EncryptController.getOmegaPoliSelection((String) poliPowFiBox.getSelectedItem()));
        }
    }//GEN-LAST:event_poliPowFiBoxItemStateChanged

    private void poliMatrixFiBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_poliMatrixFiBoxItemStateChanged
        if (poliMatrixOmegaBox.getItemCount() > 0) {
            setPoliMatrixOmegaValues(EncryptController.getOmegaPoliSelection((String) poliMatrixFiBox.getSelectedItem()));
        }
    }//GEN-LAST:event_poliMatrixFiBoxItemStateChanged

    private void poliMatrixBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_poliMatrixBoxItemStateChanged
        if (poliMatrixFiBox.getItemCount() > 0 && ((Integer) poliMatrixBox.getSelectedItem()) != 16) {
            setPoliMatrixFiValues(EncryptController.getFiPoliSelection((Integer) poliMatrixBox.getSelectedItem()));
            setPoliMatrixOmegaValues(EncryptController.getOmegaPoliSelection((String) poliMatrixFiBox.getSelectedItem()));
        }
//         FIXME 16 баг в логике 
    }//GEN-LAST:event_poliMatrixBoxItemStateChanged

    private void substExecuteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_substExecuteButtonActionPerformed
        execSubstitution();
    }//GEN-LAST:event_substExecuteButtonActionPerformed

    private void substShowTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_substShowTableButtonActionPerformed
        String[][] table = ec.substitutionReportMatrix(execSubstitution());
        new SubstitutionTable(table, this, true).setVisible(true);

    }//GEN-LAST:event_substShowTableButtonActionPerformed

    private Substitution execSubstitution() {

        Polinomial p = new Substitution.Polinomial(
                poliPowBox.getSelectedItem().toString(),
                (String) poliPowFiBox.getSelectedItem(),
                (String) poliPowOmegaBox.getSelectedItem()
        );

        Matrix m = new Substitution.Matrix(
                poliMatrixBox.getSelectedItem().toString(),
                (String) poliMatrixFiBox.getSelectedItem(),
                (String) poliMatrixOmegaBox.getSelectedItem()
        );

        Additive a = new Substitution.Additive(
                substAlphaText.getValue().toString(),
                substBetaText.getValue().toString());
        System.out.println((String) poliMatrixFiBox.getSelectedItem());
        Substitution s = new Substitution(p, m, a);

        KeysSet ks = new KeysSet(
                (String) keysTable.getValueAt(0, 0),
                (String) keysTable.getValueAt(1, 0),
                (String) keysTable.getValueAt(2, 0),
                (String) keysTable.getValueAt(3, 0)
        );
        ec.substitutionExecute(ks, s);

        return s;

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SwingVersionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SwingVersionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SwingVersionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SwingVersionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SwingVersionForm().setVisible(true);
            }
        });

    }

    // BINDING CALL METHODS
    public List<Integer> getKeySizes() {
        return EncryptController.getKeySizes();
    }

    public List<Integer> getPMValues() {
        return EncryptController.getPoliAndMatrixItems();
    }

    public List<String> getKeys() {
        return keysSet.getKeys();
    }

    public void setKeys(List<String> newKeys) {
        List<String> oldKeysList = this.keysSet.getKeys();
        this.keysSet.setKeys(newKeys);
        changeSupport.firePropertyChange("keys", oldKeysList, newKeys);
    }

    public List<String> getPoliPowFiValues() {
        return EncryptController.getFiPoliSelection((Integer) poliPowBox.getSelectedItem());
    }

    public void setPoliPowFiValues(List<String> newPoliPowFiValues) {
        List<String> oldnewPoliPowFiValues = new ArrayList<>();
        for (int i = 0; i < poliPowFiBox.getItemCount(); i++) {
            oldnewPoliPowFiValues.add((String) poliPowFiBox.getItemAt(i));
        }
        changeSupport.firePropertyChange("poliPowFiValues", oldnewPoliPowFiValues, newPoliPowFiValues);
    }

    public List<String> getPoliMatrixFiValues() {
        return EncryptController.getFiPoliSelection((Integer) poliMatrixBox.getSelectedItem());
    }

    public void setPoliMatrixFiValues(List<String> newPoliMatrixFiValues) {
        List<String> oldnewPoliMatrixFiValues = new ArrayList<>();
        for (int i = 0; i < poliMatrixFiBox.getItemCount(); i++) {
            oldnewPoliMatrixFiValues.add((String) poliMatrixFiBox.getItemAt(i));
        }
        changeSupport.firePropertyChange("poliMatrixFiValues", oldnewPoliMatrixFiValues, newPoliMatrixFiValues);
    }

    public List<String> getPoliPowOmegaValues() {
        return EncryptController.getOmegaPoliSelection((String) poliPowFiBox.getSelectedItem());
    }

    public void setPoliPowOmegaValues(List<String> newPoliPowOmegaValues) {
        List<String> oldnewPoliPowOmegaValues = new ArrayList<>();
        for (int i = 0; i < poliPowOmegaBox.getItemCount(); i++) {
            oldnewPoliPowOmegaValues.add((String) poliPowOmegaBox.getItemAt(i));
        }
        changeSupport.firePropertyChange("poliPowOmegaValues", oldnewPoliPowOmegaValues, newPoliPowOmegaValues);
    }

    public List<String> getPoliMatrixOmegaValues() {
        return EncryptController.getMatrixOmegaPoliSelection((String) poliMatrixFiBox.getSelectedItem());
    }

    public void setPoliMatrixOmegaValues(List<String> newPoliMatrixOmegaValues) {
        List<String> oldnewPoliMatrixOmegaValues = new ArrayList<>();
        for (int i = 0; i < poliMatrixOmegaBox.getItemCount(); i++) {
            oldnewPoliMatrixOmegaValues.add((String) poliMatrixOmegaBox.getItemAt(i));
        }
        changeSupport.firePropertyChange("poliMatrixOmegaValues", oldnewPoliMatrixOmegaValues, newPoliMatrixOmegaValues);
    }

    private final PropertyChangeSupport changeSupport = new PropertyChangeSupport(this);

    public void addPropertyChangeListener(PropertyChangeListener listener) {
        changeSupport.addPropertyChangeListener(listener);
    }

    public void removePropertyChangeListener(PropertyChangeListener listener) {
        changeSupport.removePropertyChangeListener(listener);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel additiveComponentsPanel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JButton generateKeyButton;
    private javax.swing.JPanel generateKeyPanel;
    private javax.swing.JRadioButton generateModeRadio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel keyPanel;
    private javax.swing.JTextField keyPathTextField;
    private javax.swing.JComboBox keySizeBox;
    private javax.swing.JTable keysTable;
    private javax.swing.JPanel loadKeyPanel;
    private javax.swing.JRadioButton loadModeRadio;
    private javax.swing.JPanel matrixSubstPanel;
    private javax.swing.ButtonGroup mode;
    private javax.swing.JPanel modePanel;
    private javax.swing.JButton openKeyPathButton;
    private javax.swing.JComboBox poliMatrixBox;
    private javax.swing.JComboBox poliMatrixFiBox;
    private javax.swing.JComboBox poliMatrixOmegaBox;
    private javax.swing.JComboBox poliPowBox;
    private javax.swing.JComboBox poliPowFiBox;
    private javax.swing.JComboBox poliPowOmegaBox;
    private javax.swing.JPanel polinomSubstPanel1;
    private javax.swing.JButton saveKeyButton;
    private javax.swing.JSpinner substAlphaText;
    private javax.swing.JSpinner substBetaText;
    private javax.swing.JButton substExecuteButton;
    private javax.swing.JButton substShowTableButton;
    private javax.swing.JPanel substitutionPanel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
